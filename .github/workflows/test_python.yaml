# Action for testing Python code on a matrix.
# yamllint disable rule:line-length
#              +----------------+     +-------------------+    +-------------------+     +--------------------+     +-------------------+
# +-------+    |                |     |                   |    |                   |     |                    |     |                   |     +--------+
# |       |    |                |     |      CHECK        |    |     TEST WITH     |     |     TEST WITH      |     |    CHECK CODE     |     |        |
# | START +--->+  CREATE CACHE  +---->+    FORMATTING     +--->+       PYTEST      +---->+       MYPY         +---->+      QUALITY      +---->+  STOP  |
# |       |    |                |     |                   |    |                   |     |                    |     |                   |     |        |
# +-------+    |                |     |                   |    |                   |     |                    |     |                   |     +--------+
#              +----------------+     +-------------------+    +-------------------+     +--------------------+     +-------------------+
---
name: Test Python
on: # yamllint disable-line rule:truthy rule:comments
  pull_request:
    branches:
      - main

env:
  CI_TEST_ENV: "GitHub Actions"

jobs:
  test-python:
    name: Create python environment cache and test with black, pytest, mypy, bandit, flake8, and pydocstyle
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9, 3.10.7]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    steps:
      - name: Checkout code
        id: checkout-code
        uses: actions/checkout@v3
      - name: Setup Python version ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set environment variables for the job
        id: set-env-var
        run: |
          echo "python-version=$(python --version)" >> $GITHUB_ENV
          echo "week-number=$(date "+%V")" >> $GITHUB_ENV
      - name: Python environment cache
        uses: actions/cache@v3
        id: create-cache
        env:
          cache-name: cache-python-env
        with:
          path: |
            .venv
          key: ${{ env.cache-name }}-${{ env.week-number }}-${{ runner.os }}-${{ env.python-version }}-${{ hashFiles('requirements*.txt') }}
      - name: Create environment
        id: create-environment
        if: ${{ steps.create-cache.outputs.cache-hit == false }}
        run: |
          echo "start_create_venv=$(TZ=UTC date --rfc-3339=ns)"  >> $GITHUB_ENV
          python -m venv .venv;
          source .venv/bin/activate;
          python -m pip install --upgrade pip;
          python -m pip install --upgrade wheel;
          python -m pip install -r requirements.txt;
          python -m pip install -r requirements-dev.txt;
          echo "stop_create_venv=$(TZ=UTC date --rfc-3339=ns)"  >> $GITHUB_ENV
      - name: Check code formatting with black
        id: check-formatting
        run: |
          source .venv/bin/activate; # Activate python environment: this doesn't persist between steps
          echo "start_black=$(TZ=UTC date --rfc-3339=ns)"  >> $GITHUB_ENV
          black --check .
          echo "stop_black=$(TZ=UTC date --rfc-3339=ns)"  >> $GITHUB_ENV
      - name: Test with pytest
        id: test-pytest
        run: |
          source .venv/bin/activate; # Activate python environment: this doesn't persist between steps
          echo "start_pytest=$(TZ=UTC date --rfc-3339=ns)"  >> $GITHUB_ENV
          pytest;
          echo "stop_pytest=$(TZ=UTC date --rfc-3339=ns)"  >> $GITHUB_ENV
      - name: Test with mypy
        id: test-mypy
        run: |
          source .venv/bin/activate; # Activate python virtual environment: this doesn't persist between steps
          echo "start_mypy=$(TZ=UTC date --rfc-3339=ns)"  >> $GITHUB_ENV
          mypy;
          echo "stop_mypy=$(TZ=UTC date --rfc-3339=ns)"  >> $GITHUB_ENV
      - name: Test with bandit
        id: test-bandit
        run: |
          source .venv/bin/activate; # Activate python environment: this doesn't persist between steps
          echo "start_bandit=$(TZ=UTC date --rfc-3339=ns)"  >> $GITHUB_ENV
          bandit --ini .bandit;
          echo "stop_bandit=$(TZ=UTC date --rfc-3339=ns)"  >> $GITHUB_ENV
      - name: Test with flake8
        id: test-flake8
        run: |
          source .venv/bin/activate; # Activate python environment: this doesn't persist between steps
          echo "start_flake8=$(TZ=UTC date --rfc-3339=ns)"  >> $GITHUB_ENV
          flake8;
          echo "stop_flake8=$(TZ=UTC date --rfc-3339=ns)"  >> $GITHUB_ENV
      - name: Test with pydocstyle
        id: test-pydocstyle
        run: |
          source .venv/bin/activate; # Activate python environment: this doesn't persist between steps
          echo "start_pydocstyle=$(TZ=UTC date --rfc-3339=ns)"  >> $GITHUB_ENV
          pydocstyle;
          echo "stop_pydocstyle=$(TZ=UTC date --rfc-3339=ns)"  >> $GITHUB_ENV
      - name: Output env info
        id: save-env-info
        run: |
          source .venv/bin/activate;
          echo "cache_hit=${{ steps.create-cache.outputs.cache-hit }}" >> $GITHUB_ENV
          echo "python_ver=$(python --version)"  >> $GITHUB_ENV
          echo "pip_ver=$(pip --version)"  >> $GITHUB_ENV
          echo "pip_freeze=$(pip freeze | tr "\n" ";")"  >> $GITHUB_ENV
      - name: Generate markdown report
        id: gen-md-report
        run: |
          echo "# Create python environment cache and test with black, pytest, mypy, bandit, flake8, and pydocstyle" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          python .github/workflows/gen_json_test.py >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
