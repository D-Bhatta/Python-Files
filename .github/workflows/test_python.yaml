# Action for testing Python code using pytest on a matrix
# yamllint disable rule:line-length
# * TODO: Cache up check-formatting
# * TODO: Add a matrix to check-formatting
# * TODO: Instrument up check-formatting
# * TODO: Use python to write json to STDOUT, and append that to GITHUB_ENV
# * TODO: Instrument up test
# * TODO: Run it
# * ! TODO: Fix unnecessary null values in job summaries for test
# * ! TODO: Fix unnecessary Fix null values in job summaries for check-formatting
# * TODO: Remove redundant stuff from check-formatting
# * TODO: Remove redundant stuff from test
# * TODO: Add more static tools to test like flake8
# * TODO: Fix: Activate python venv at every step
# * TODO: Properly format instrumentation JSON
# * TODO: Add environment info in instrumentation JSON: https://stackoverflow.com/questions/43322014/change-delimiter-in-string-type-of-variable-in-bash

---
name: Test Python
on: # yamllint disable-line rule:truthy rule:comments
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  check-formatting:
    name: Check code formatting with black
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.10.4]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Python version ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set environment variables for cache
        id: set-env-var-cache
        run: |
          echo "python-version=$(python --version)" >> $GITHUB_ENV
          echo "week-number=$(date "+%V")" >> $GITHUB_ENV
      - name: Python environment cache
        uses: actions/cache@v3
        id: venv-cache
        env:
          cache-name: cache-python-env-formatting
        with:
          path: .venv
          key: ${{ env.cache-name }}-${{ env.week-number }}-${{ runner.os }}-${{ env.python-version }}
      - name: Create environment
        # Create a python environment if cache is not present
        id: check-formatting-create-environment
        if: ${{ steps.venv-cache.outputs.cache-hit == false }}
        run: |
          echo "start_create_venv=$(TZ=UTC date --rfc-3339=ns)"  >> $GITHUB_ENV
          python -m venv .venv;
          source .venv/bin/activate;
          python -m pip install --upgrade pip;
          python -m pip install --upgrade wheel;
          python -m pip install black
          echo "stop_create_venv=$(TZ=UTC date --rfc-3339=ns)"  >> $GITHUB_ENV
      - name: Check code formatting with black
        id: check-formatting-run-black
        run: |
          source .venv/bin/activate;
          echo "start_black=$(TZ=UTC date --rfc-3339=ns)"  >> $GITHUB_ENV
          black --check .
          echo "stop_black=$(TZ=UTC date --rfc-3339=ns)"  >> $GITHUB_ENV
      - name: Output env info
        id: check-formatting-save-env-info
        run: |
          source .venv/bin/activate;
          echo "cache_hit=${{ steps.venv-cache.outputs.cache-hit }}" >> $GITHUB_ENV
          echo "python_ver=$(python --version)"  >> $GITHUB_ENV
          echo "pip_ver=$(pip --version)"  >> $GITHUB_ENV
          echo "pip_freeze=$(pip freeze | tr "\n" ";")"  >> $GITHUB_ENV
      - name: Generate markdown report
        id: gen-md-report
        run: |
          echo "# Check code formatting with black" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          python .github/workflows/gen_json.py >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
  test:
    name: Test with pytest, mypy, bandit, flake8, and pydocstyle
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8, 3.9, 3.10.4]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Python version ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set environment variables for cache
        id: set-env-var-cache
        run: |
          echo "python-version=$(python --version)" >> $GITHUB_ENV
          echo "week-number=$(date "+%V")" >> $GITHUB_ENV
      - name: Python environment cache
        uses: actions/cache@v3
        id: venv-cache
        env:
          cache-name: cache-python-env
        with:
          path: .venv
          key: ${{ env.cache-name }}-${{ env.week-number }}-${{ runner.os }}-${{ env.python-version }}-${{ hashFiles('requirements*.txt') }}
      - name: Create environment
        id: create-environment
        if: ${{ steps.venv-cache.outputs.cache-hit == false }}
        run: |
          echo "start_test_create_environment=$(TZ=UTC date --rfc-3339=ns)"  >> $GITHUB_ENV
          python -m venv .venv;
          source .venv/bin/activate;
          python -m pip install --upgrade pip;
          python -m pip install --upgrade wheel;
          python -m pip install -r requirements.txt;
          python -m pip install -r requirements-dev.txt;
          echo "stop_test_create_environment=$(TZ=UTC date --rfc-3339=ns)"  >> $GITHUB_ENV
      - name: Activate python environment
        id: activate-env
        run: |
          source .venv/bin/activate;
      - name: Test with pytest
        id: test-pytest
        run: |
          source .venv/bin/activate; # Activate python environment: this doesn't persist between steps
          echo "start_pytest=$(TZ=UTC date --rfc-3339=ns)"  >> $GITHUB_ENV
          pytest;
          echo "stop_pytest=$(TZ=UTC date --rfc-3339=ns)"  >> $GITHUB_ENV
      - name: Test with mypy
        id: test-mypy
        run: |
          source .venv/bin/activate; # Activate python virtual environment: this doesn't persist between steps
          echo "start_mypy=$(TZ=UTC date --rfc-3339=ns)"  >> $GITHUB_ENV
          mypy;
          echo "stop_mypy=$(TZ=UTC date --rfc-3339=ns)"  >> $GITHUB_ENV
      - name: Test with bandit
        id: test-bandit
        run: |
          source .venv/bin/activate;
          echo "start_bandit=$(TZ=UTC date --rfc-3339=ns)"  >> $GITHUB_ENV
          bandit --ini .bandit;
          echo "stop_bandit=$(TZ=UTC date --rfc-3339=ns)"  >> $GITHUB_ENV
      - name: Test with flake8
        id: test-flake8
        run: |
          source .venv/bin/activate;
          echo "start_flake8=$(TZ=UTC date --rfc-3339=ns)"  >> $GITHUB_ENV
          flake8;
          echo "stop_flake8=$(TZ=UTC date --rfc-3339=ns)"  >> $GITHUB_ENV
      - name: Test with pydocstyle
        id: test-pydocstyle
        run: |
          source .venv/bin/activate;
          echo "start_pydocstyle=$(TZ=UTC date --rfc-3339=ns)"  >> $GITHUB_ENV
          pydocstyle;
          echo "stop_pydocstyle=$(TZ=UTC date --rfc-3339=ns)"  >> $GITHUB_ENV
      - name: Output env info
        id: check-formatting-save-env-info
        run: |
          source .venv/bin/activate;
          echo "cache_hit=${{ steps.venv-cache.outputs.cache-hit }}" >> $GITHUB_ENV
          echo "python_ver=$(python --version)"  >> $GITHUB_ENV
          echo "pip_ver=$(pip --version)"  >> $GITHUB_ENV
          echo "pip_freeze=$(pip freeze | tr "\n" ";")"  >> $GITHUB_ENV
      - name: Generate markdown report
        id: gen-md-report
        run: |
          echo "# Test with pytest, mypy, bandit, flake8, and pydocstyle" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          python .github/workflows/gen_json_test.py >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
